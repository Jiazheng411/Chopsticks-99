global Reg {
  const PLAYER1_NUM1   = 4d0;
  const PLAYER1_NUM2   = 4d1;  
  const PLAYER2_NUM1   = 4d2;  
  const PLAYER2_NUM2   = 4d3;  
  const TEMP_RESULT    = 4d4;
  const TEMP_COMPARE_RESULT = 4d5;
  const ADD_FROM_VALUE = 4d6;
  const ADD_TO_VALUE = 4d7;
  const ADD_TO_WHICH_NUMBER = 4d8;
  const CURRENT_PLAYER = 4d9;
  const CURRENT_WINNER = 4d10;
}


module regFile (
    input clk,  // clock
    input rst,  // reset
    input we,   // wrtite enable for regfile
    input wa[4],  //writing address
    input writing_data[16],  //writing_data
    input ra_address[4],     // reading address 1
    input rb_address[4],     // reading address 2
    
    output a[16],     
    output b[16],
    
    // for display
    output ioseg_val[8],   // 7-seg on mojo
    output iosel_val[4],   
    output seven_seg_separate[4][7],  // 4 separate value of 7-seg display
    //current players and winner
    output player[2],
    output winner[2],
    // for debug
    output temp_result_display[16],   
    output reg1[16]
  )
  
{
  
  // declare multi_seg_separate_io for 4 separate 7-seg
  multi_seg_separate_io seg_sep;
  
  
  .clk(clk){
    .rst(rst){
    
      // declare seven_seg display
      multi_seven_seg seg;
      
      // registers in regfiles 
      // four numbers start with value 1
      dff p1_number1[16](#INIT(b01));
      dff p1_number2[16](#INIT(b01));
      dff p2_number1[16](#INIT(b01));
      dff p2_number2[16](#INIT(b01));
      dff temp_result[16];
      dff temp_compare_result;
      dff add_from_value[16](#INIT(0));
      dff add_to_value[16](#INIT(0));
      dff add_to_which_number[16](#INIT(0));
      dff current_player[2](#INIT(0));
      dff current_winner[2](#INIT(0));
    }
  }


  always {
  
  // 7-seg displays on mojo
  seg.values = {p1_number1.q[3:0], p1_number2.q[3:0], p2_number1.q[3:0], p2_number2.q[3:0]};
  iosel_val = ~seg.sel;
  ioseg_val = ~seg.seg;
  // 7-seg displays of game 
  seg_sep.values = {p1_number1.q[3:0], p1_number2.q[3:0], p2_number1.q[3:0], p2_number2.q[3:0]};
  seven_seg_separate = seg_sep.out;
    
  player = current_player.q;
  winner = current_winner.q;
    

  // write to regfile according to wrting data and writing address if we is 1
  if(we){
    case(wa){
        Reg.PLAYER1_NUM1: p1_number1.d = writing_data;
        Reg.PLAYER1_NUM2: p1_number2.d = writing_data;
        Reg.PLAYER2_NUM1: p2_number1.d = writing_data;
        Reg.PLAYER2_NUM2: p2_number2.d = writing_data;
        Reg.TEMP_RESULT: temp_result.d = writing_data;
        Reg.TEMP_COMPARE_RESULT: temp_compare_result.d = writing_data[0];
        Reg.ADD_FROM_VALUE: add_from_value.d = writing_data;
        Reg.ADD_TO_VALUE: add_to_value.d = writing_data;
        Reg.ADD_TO_WHICH_NUMBER: add_to_which_number.d = writing_data;
        Reg.CURRENT_PLAYER: current_player.d = writing_data[1:0];
        Reg.CURRENT_WINNER: current_winner.d = writing_data[1:0];
      }
    
      
    }
  // get value a according to ra_address
  case(ra_address){
      Reg.PLAYER1_NUM1: a = p1_number1.q;
      Reg.PLAYER1_NUM2: a = p1_number2.q;
      Reg.PLAYER2_NUM1: a = p2_number1.q;
      Reg.PLAYER2_NUM2: a = p2_number2.q;
      Reg.TEMP_RESULT: a = temp_result.q;
      Reg.TEMP_COMPARE_RESULT: a = temp_compare_result.q;
      Reg.ADD_FROM_VALUE: a = add_from_value.q;
      Reg.ADD_TO_VALUE: a = add_to_value.q;
      Reg.ADD_TO_WHICH_NUMBER: a = add_to_which_number.q;
      default: a = 0;
    }
    
    // get value b according to rb_address
  case(rb_address){
      Reg.PLAYER1_NUM1: b = p1_number1.q;
      Reg.PLAYER1_NUM2: b = p1_number2.q;
      Reg.PLAYER2_NUM1: b = p2_number1.q;
      Reg.PLAYER2_NUM2: b = p2_number2.q;
      Reg.TEMP_RESULT: b = temp_result.q;
      Reg.TEMP_COMPARE_RESULT: b = temp_compare_result.q;
      Reg.ADD_FROM_VALUE: b = add_to_value.q;
      Reg.ADD_TO_VALUE: b = add_to_value.q;
      Reg.ADD_TO_WHICH_NUMBER: b = add_to_which_number.q;
      default: b = 0;
    }
    
    // for debug
    temp_result_display = temp_result.q;
    reg1 = p1_number1.q;
  }
}
