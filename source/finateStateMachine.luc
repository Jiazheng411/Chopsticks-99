// fsm and control logic

// constants

// 3 asel values
global Asel{
  const CONST_ONE = 2d1;
  const CONST_TWO = 2d2;
  const FROM_REGFILE = 2d3;
}

// 4 bsel values
global Bsel{
  const CONST_ZERO = 2d0;
  const CONST_NINE = 2d1;
  const CONST_TEN = 2d2;
  const FROM_REGFILE = 2d3;
} 

// current player
global PersonPlyer{
 const NOONE = b00;
 const P1PLAYING = b01;
 const P2PLAYING = b10;
}

// current winner
global PersonWin{
 const NOONE = b00;
 const P1WIN = b01;
 const P2WIN = b10;
}


// finateStateMachine and Control Unit 
module finateStateMachine (
    input clk,  // clock
    input rst,  // reset
    input button1_pressed,  // 8 buttun pressed signals
    input button2_pressed,
    input button3_pressed,
    input button4_pressed,
    input button5_pressed,
    input button6_pressed,
    input button7_pressed,
    input button8_pressed,
    
    input who_go_first,     // value go goes first
    input z_regfile_port_a,
    
    // control logic signals
    output alufn[6],
    output asel[2],
    output bsel[2],
    output regfile_ra_address[4],
    output regfile_rb_address[4],
    output regfile_we,
    output regfile_writing_address[4],
    
    output which_player[2],  // which player is playing 
    output who_win[2]        // who wins the game
    
  ) {
  .clk(clk){
    fsm game_fsm={
      START,
      
      // P1's turn
      
      P1_PLAY,   // p1 make his/her choice by clicking button
                 // store add_from_number to Reg.ADD_FROM_VALUE base on btn input
      P1_STORE_TO_FIRST_NUMBER_VALUE,  // store p1's 1st number to Reg.ADD_TO_VALUE
                                       // ADDC(Reg.PLAYER1_NUM1, 0 ,Reg.ADD_TO_VALUE)
      P1_STORE_ADD_TO_NUMBER1,         // store 1 to Reg.ADD_TO_WHICH_NUMBER
                                       // ADDC(1,0,Reg.ADD_TO_WHICH_NUMBER)
      P1_STORE_TO_SECOND_NUMBER_VALUE, // store p1's 2nd number to Reg.ADD_TO_VALUE
                                       // ADDC(Reg.PLAYER1_NUM2, 0 ,Reg.ADD_TO_VALUE)
      P1_STORE_ADD_TO_NUMBER2,         // store 2 to Reg.ADD_TO_WHICH_NUMBER
                                       // ADDC(2,0,Reg.ADD_TO_WHICH_NUMBER)
      P1_SCORE_ADDING,                 // ADD(Reg.ADD_TO_VALUE, Reg.ADD_FROM_VALUE, Reg.TEMP_RESULT)
      
      // remainder 10
      P1_CHECK_SCORE_LESS_THAN_10,     // CMPLTC(Reg.TEMP_RESULT, 10, Reg.TEMP_COMPARE_RESULT)
      P1_CHECK_SCORE_BRANCH,           // branch according to Reg.TEMP_COMPARE_RESULT
                                       // if z is true(Reg.TEMP_COMPARE_RESULT is 0), 
                                          //branch to game_fsm.P1_SCORE_MINUS_10
                                       // if z is false(Reg.TEMP_COMPARE_RESULT is 1), 
                                          //branch to game_fsm.P1_DISPLAY_RESULT_CMP
      P1_SCORE_MINUS_10,               // SUBC(Reg.TEMP_RESULT, 10, Reg.TEMP_RESULT)
      
      // save temperory result back to main registers
      P1_DISPLAY_RESULT_CMP,           // CMPEQC(Reg.ADD_TO_WHICH_NUMBER, 1, Reg.TEMP_COMPARE_RESULT)
      P1_DISPLAY_RESULT_BRANCH,        // branch according to Reg.TEMP_COMPARE_RESULT
      P1_DISPLAY_RESULT_ADD_BACK_TO_NUMBER1,     // ADDC(Reg.TEMP_RESULT, 0, Reg.PLAYER1_NUM1)
      P1_DISPLAY_RESULT_ADD_BACK_TO_NUMBER2,     // ADDC(Reg.TEMP_RESULT, 0, Reg.PLAYER1_NUM2)
      
      // check whether p1 wins
      P1_CHECK_FIRST,               // CMPEQC(Reg.PLAYER1_NUM1, 9 ,Reg.TEMP_COMPARE_RESULT)
      P1_CHECK_WIN_FIRST_STAGE,     // branch according to Reg.TEMP_COMPARE_RESULT
      P1_CHECK_SECOND,              // CMPEQC(Reg.PLAYER1_NUM2, 9 ,Reg.TEMP_COMPARE_RESULT)
      P1_CHECK_WIN_SECOND_STAGE,    // branch according to Reg.TEMP_COMPARE_RESULT
      
      // P2's turn, similar as p1's turn
      P2_PLAY, 
      P2_STORE_TO_FIRST_NUMBER_VALUE,
      P2_STORE_ADD_TO_NUMBER1,
      P2_STORE_TO_SECOND_NUMBER_VALUE,
      P2_STORE_ADD_TO_NUMBER2,
      P2_STORE_TO_WHICH_NUMBER,
      P2_SCORE_ADDING,
        // remainder 10
      P2_CHECK_SCORE_LESS_THAN_10,
      P2_CHECK_SCORE_BRANCH,
      P2_SCORE_MINUS_10,
      P2_DISPLAY_RESULT_CMP,
      P2_DISPLAY_RESULT_BRANCH,
      P2_DISPLAY_RESULT_ADD_BACK_TO_NUMBER1,
      P2_DISPLAY_RESULT_ADD_BACK_TO_NUMBER2,
        // check whether p2 wins
      P2_CHECK_FIRST,
      P2_CHECK_WIN_FIRST_STAGE,
      P2_CHECK_SECOND,
      P2_CHECK_WIN_SECOND_STAGE,
      
      // end
      GAME_END_P1_WIN,
      GAME_END_P2_WIN
      };
  }

  always {
    //default values
    alufn = Alufn.ADD;
    asel = Asel.FROM_REGFILE;
    bsel = Bsel.FROM_REGFILE;
    regfile_we = 0;
    regfile_writing_address = Reg.TEMP_RESULT;
    regfile_ra_address = Reg.PLAYER1_NUM1;
    regfile_rb_address = Reg.PLAYER2_NUM1;
    which_player = PersonPlyer.NOONE;
    who_win = PersonWin.NOONE;
    
    //reset to restart game
    if (rst){
        game_fsm.d = game_fsm.START;
    }
    else{
    
      case(game_fsm.q){
        
        
        // start game according to who_go_first
        game_fsm.START:
          if(who_go_first == 0){
            game_fsm.d = game_fsm.P1_PLAY;
          }
          else{
            game_fsm.d = game_fsm.P2_PLAY;
          }
        
        // p1's choice
        // store corresponding number value to Reg.ADD_FROM_VALUE according to input 
        // go to game_fsm.P1_STORE_TO_FIRST_NUMBER_VALUE if btn1/btn2 is 1
        // go to game_fsm.P1_STORE_TO_SECOND_NUMBER_VALUE if btn3/btn4 is 1
        game_fsm.P1_PLAY:
          which_player = PersonPlyer.P1PLAYING;
          if(button1_pressed | button2_pressed | button3_pressed | button4_pressed){
            alufn = Alufn.ADD;
            bsel = Bsel.CONST_ZERO;
            regfile_writing_address = Reg.ADD_FROM_VALUE;
            regfile_we = 1;
            if(button1_pressed){
              regfile_ra_address = Reg.PLAYER2_NUM1;
              game_fsm.d = game_fsm.P1_STORE_TO_FIRST_NUMBER_VALUE;
            }
            else if (button2_pressed){
              regfile_ra_address = Reg.PLAYER2_NUM2;
              game_fsm.d = game_fsm.P1_STORE_TO_FIRST_NUMBER_VALUE;
            }
            else if (button3_pressed){
              regfile_ra_address = Reg.PLAYER2_NUM1;
              game_fsm.d = game_fsm.P1_STORE_TO_SECOND_NUMBER_VALUE;
            }
            else if (button4_pressed){
              regfile_ra_address = Reg.PLAYER2_NUM2;
              game_fsm.d = game_fsm.P1_STORE_TO_SECOND_NUMBER_VALUE;
            }                         
          }
          // invalid input or no input
          else{
            game_fsm.d = game_fsm.P1_PLAY;
          }
          
        //ADDC(Reg.PLAYER1_NUM1, 0 ,Reg.ADD_TO_VALUE)
        //go to game_fsm.P1_STORE_ADD_TO_NUMBER1
        game_fsm.P1_STORE_TO_FIRST_NUMBER_VALUE:
          which_player = PersonPlyer.P1PLAYING;
          alufn = Alufn.ADD;
          regfile_ra_address = Reg.PLAYER1_NUM1;
          bsel = Bsel.CONST_ZERO;
          regfile_writing_address = Reg.ADD_TO_VALUE;
          regfile_we = 1;
          game_fsm.d = game_fsm.P1_STORE_ADD_TO_NUMBER1;
        
        //ADDC(1, 0 ,Reg.ADD_TO_WHICH_NUMBER)
        // go to game_fsm.P1_SCORE_ADDING;
        game_fsm.P1_STORE_ADD_TO_NUMBER1:
          which_player = PersonPlyer.P1PLAYING;
          alufn = Alufn.ADD;
          asel = Asel.CONST_ONE;
          bsel = Bsel.CONST_ZERO;
          regfile_writing_address = Reg.ADD_TO_WHICH_NUMBER;
          regfile_we = 1;
          game_fsm.d = game_fsm.P1_SCORE_ADDING;
        
        //ADDC(Reg.PLAYER1_NUM2, 0 ,Reg.ADD_TO_VALUE)
        //go to game_fsm.P1_STORE_ADD_TO_NUMBER2
        game_fsm.P1_STORE_TO_SECOND_NUMBER_VALUE:
          which_player = PersonPlyer.P1PLAYING;
          alufn = Alufn.ADD;
          regfile_ra_address = Reg.PLAYER1_NUM2;
          bsel = Bsel.CONST_ZERO;
          regfile_writing_address = Reg.ADD_TO_VALUE;
          regfile_we = 1;
          game_fsm.d = game_fsm.P1_STORE_ADD_TO_NUMBER2;
          
       // ADDC(1,2,Reg.ADD_TO_WHICH_NUMBER)
       // go to game_fsm.P1_SCORE_ADDING;
       game_fsm.P1_STORE_ADD_TO_NUMBER2:
          which_player = PersonPlyer.P1PLAYING;
          alufn = Alufn.ADD;
          asel = Asel.CONST_TWO;
          bsel = Bsel.CONST_ZERO;
          regfile_writing_address = Reg.ADD_TO_WHICH_NUMBER;
          regfile_we = 1;
          game_fsm.d = game_fsm.P1_SCORE_ADDING;
          
        //ADD(Reg.ADD_FROM_VALUE,Reg.ADD_TO_VALUE, Reg.TEMP_RESULT)
        // go to game_fsm.P1_CHECK_SCORE_LESS_THAN_10
        game_fsm.P1_SCORE_ADDING:
          which_player = PersonPlyer.P1PLAYING;
          alufn = Alufn.ADD; // adding;
          regfile_ra_address = Reg.ADD_FROM_VALUE;
          regfile_rb_address = Reg.ADD_TO_VALUE;
          regfile_writing_address = Reg.TEMP_RESULT;  //temp result register
          regfile_we = 1;
          game_fsm.d = game_fsm.P1_CHECK_SCORE_LESS_THAN_10;
          
          
        // CMPLTC(Reg.TEMP_RESULT, 10, Reg.TEMP_COMPARE_RESULT)
        // go to game_fsm.P1_CHECK_SCORE_BRANCH
        game_fsm.P1_CHECK_SCORE_LESS_THAN_10:
          which_player = PersonPlyer.P1PLAYING;
          alufn = Alufn.CMPLT;
          bsel = Bsel.CONST_TEN;
          regfile_ra_address = Reg.TEMP_RESULT;
          regfile_writing_address = Reg.TEMP_COMPARE_RESULT;
          regfile_we = 1;
          game_fsm.d = game_fsm.P1_CHECK_SCORE_BRANCH;
          
        //if Reg.TEMP_COMPARE_RESULT = 0, z = 1: go to game_fsm.P1_SCORE_MINUS_10
        //if Reg.TEMP_COMPARE_RESULT = 1, z = 0: go to game_fsm.P1_DISPLAY_RESULT_CMP
        game_fsm.P1_CHECK_SCORE_BRANCH:
          which_player = PersonPlyer.P1PLAYING;
          regfile_ra_address = Reg.TEMP_COMPARE_RESULT;
          if(!z_regfile_port_a){
            game_fsm.d = game_fsm.P1_DISPLAY_RESULT_CMP;
          }
          else{
          game_fsm.d = game_fsm.P1_SCORE_MINUS_10;
          }

        //SUBC(Reg.TEMP_RESULT, 10, Reg.TEMP_RESULT)
        // go to game_fsm.P1_DISPLAY_RESULT_CMP
        game_fsm.P1_SCORE_MINUS_10:
          which_player = PersonPlyer.P1PLAYING;
          bsel = Bsel.CONST_TEN;
          alufn = Alufn.MINUS;
          regfile_we = 1;
          regfile_ra_address = Reg.TEMP_RESULT;
          regfile_writing_address = Reg.TEMP_RESULT;
          game_fsm.d = game_fsm.P1_DISPLAY_RESULT_CMP;
        
        //CMPEQC(Reg.ADD_TO_WHICH_NUMBER, 1, Reg.TEMP_COMPARE_RESULT)
        //go to game_fsm.P1_DISPLAY_RESULT_BRANCH
        game_fsm.P1_DISPLAY_RESULT_CMP:
          which_player = PersonPlyer.P1PLAYING;
          alufn = Alufn.CMPEQ;
          asel = Asel.CONST_ONE;
          regfile_rb_address = Reg.ADD_TO_WHICH_NUMBER;
          regfile_writing_address = Reg.TEMP_COMPARE_RESULT;
          regfile_we = 1;
          game_fsm.d = game_fsm.P1_DISPLAY_RESULT_BRANCH;
          
        //if Reg.TEMP_COMPARE_RESULT = 0, z = 1: go to game_fsm.P1_DISPLAY_RESULT_ADD_BACK_TO_NUMBER2
        //if Reg.TEMP_COMPARE_RESULT = 1, z = 0: go to game_fsm.P1_DISPLAY_RESULT_ADD_BACK_TO_NUMBER1
        game_fsm.P1_DISPLAY_RESULT_BRANCH:
          which_player = PersonPlyer.P1PLAYING;
          regfile_ra_address = Reg.TEMP_COMPARE_RESULT;
          if(!z_regfile_port_a){
            game_fsm.d = game_fsm.P1_DISPLAY_RESULT_ADD_BACK_TO_NUMBER1;
          }
          else{
            game_fsm.d = game_fsm.P1_DISPLAY_RESULT_ADD_BACK_TO_NUMBER2;
          }
          
        //ADDC(Reg.TEMP_RESULT, 0, Reg.PLAYER1_NUM1)
        //go to game_fsm.P1_CHECK_FIRST;
        game_fsm.P1_DISPLAY_RESULT_ADD_BACK_TO_NUMBER1:
          which_player = PersonPlyer.P1PLAYING;
          regfile_ra_address = Reg.TEMP_RESULT;
          bsel = Bsel.CONST_ZERO;
          regfile_writing_address = Reg.PLAYER1_NUM1;
          regfile_we = 1;
          game_fsm.d = game_fsm.P1_CHECK_FIRST;
          
        //ADDC(Reg.TEMP_RESULT, 0, Reg.PLAYER1_NUM2)
        //go to game_fsm.P1_CHECK_FIRST;
        game_fsm.P1_DISPLAY_RESULT_ADD_BACK_TO_NUMBER2:
          which_player = PersonPlyer.P1PLAYING;
          regfile_ra_address = Reg.TEMP_RESULT;
          bsel = Bsel.CONST_ZERO;
          regfile_writing_address = Reg.PLAYER1_NUM2;
          regfile_we = 1;
          game_fsm.d = game_fsm.P1_CHECK_FIRST;
         
     
       //CMPEQC(Reg.PLAYER1_NUM1, 9, Reg.TEMP_COMPARE_RESULT)
       // go to game_fsm.P1_CHECK_WIN_FIRST_STAGE
       game_fsm.P1_CHECK_FIRST:
          which_player = PersonPlyer.P1PLAYING;
          bsel = Bsel.CONST_NINE;
          alufn = Alufn.CMPEQ; //COMEQ
          regfile_ra_address = Reg.PLAYER1_NUM1;
          regfile_we = 1;
          regfile_writing_address = Reg.TEMP_COMPARE_RESULT;
          game_fsm.d = game_fsm.P1_CHECK_WIN_FIRST_STAGE;
          
        //if Reg.TEMP_COMPARE_RESULT = 0, z = 1: go to game_fsm.P2_PLAY
        //if Reg.TEMP_COMPARE_RESULT = 1, z = 0: go to game_fsm.P1_CHECK_SECOND          
        game_fsm.P1_CHECK_WIN_FIRST_STAGE:
          which_player = PersonPlyer.P1PLAYING;
          regfile_ra_address = Reg.TEMP_COMPARE_RESULT;
          if (!z_regfile_port_a){
            game_fsm.d = game_fsm.P1_CHECK_SECOND;
          }
          else{
            game_fsm.d = game_fsm.P2_PLAY;
          }
          
        //CMPEQC(Reg.PLAYER1_NUM2, 9, Reg.TEMP_COMPARE_RESULT)
        //go to game_fsm.P1_CHECK_WIN_SECOND_STAGE
        game_fsm.P1_CHECK_SECOND:
          bsel = Bsel.CONST_NINE;
          alufn = Alufn.CMPEQ; //COMEQ
          regfile_ra_address = Reg.PLAYER1_NUM2;
          regfile_we = 1;
          regfile_writing_address = Reg.TEMP_COMPARE_RESULT;
          game_fsm.d = game_fsm.P1_CHECK_WIN_SECOND_STAGE;
          
        //if Reg.TEMP_COMPARE_RESULT = 0, z = 1: go to game_fsm.P2_PLAY
        //if Reg.TEMP_COMPARE_RESULT = 1, z = 0: go to game_fsm.GAME_END_P1_WIN
        game_fsm.P1_CHECK_WIN_SECOND_STAGE:
          which_player = PersonPlyer.P1PLAYING;
          regfile_ra_address = Reg.TEMP_COMPARE_RESULT;
          if (!z_regfile_port_a){
            game_fsm.d = game_fsm.GAME_END_P1_WIN;
          }else{
            game_fsm.d = game_fsm.P2_PLAY;
          }

        // p2's choice
        // store corresponding number value to Reg.ADD_FROM_VALUE according to input 
        // go to game_fsm.P2_STORE_TO_FIRST_NUMBER_VALUE if btn5/btn6 is 1
        // go to game_fsm.P2_STORE_TO_SECOND_NUMBER_VALUE if btn7/btn8 is 1
        game_fsm.P2_PLAY:
          which_player = PersonPlyer.P2PLAYING;
          if(button5_pressed | button6_pressed | button7_pressed | button8_pressed){
            alufn = Alufn.ADD;
            bsel = Bsel.CONST_ZERO;
            regfile_writing_address = Reg.ADD_FROM_VALUE;
            regfile_we = 1;
            if(button5_pressed){
              regfile_ra_address = Reg.PLAYER1_NUM1;
              game_fsm.d = game_fsm.P2_STORE_TO_FIRST_NUMBER_VALUE;
            }
            else if (button6_pressed){
              regfile_ra_address = Reg.PLAYER1_NUM2;
              game_fsm.d = game_fsm.P2_STORE_TO_FIRST_NUMBER_VALUE;
            }
            else if (button7_pressed){
              regfile_ra_address = Reg.PLAYER1_NUM1;
              game_fsm.d = game_fsm.P2_STORE_TO_SECOND_NUMBER_VALUE;
            }
            else if (button8_pressed){
              regfile_ra_address = Reg.PLAYER1_NUM2;
              game_fsm.d = game_fsm.P2_STORE_TO_SECOND_NUMBER_VALUE;
            }                         
          }
          else{
            game_fsm.d = game_fsm.P2_PLAY;
          }
          
        //ADDC(Reg.PLAYER2_NUM1, 0 ,Reg.ADD_TO_VALUE)
        //go to game_fsm.P2_STORE_ADD_TO_NUMBER1
        game_fsm.P2_STORE_TO_FIRST_NUMBER_VALUE:
          which_player = PersonPlyer.P2PLAYING;
          alufn = Alufn.ADD;
          regfile_ra_address = Reg.PLAYER2_NUM1;
          bsel = Bsel.CONST_ZERO;
          regfile_writing_address = Reg.ADD_TO_VALUE;
          regfile_we = 1;
          game_fsm.d = game_fsm.P2_STORE_ADD_TO_NUMBER1;
        
        //ADDC(1, 0 ,Reg.ADD_TO_WHICH_NUMBER)
        // go to game_fsm.P2_SCORE_ADDING
        game_fsm.P2_STORE_ADD_TO_NUMBER1:
          which_player = PersonPlyer.P2PLAYING;
          alufn = Alufn.ADD;
          asel = Asel.CONST_ONE;
          bsel = Bsel.CONST_ZERO;
          regfile_writing_address = Reg.ADD_TO_WHICH_NUMBER;
          regfile_we = 1;
          game_fsm.d = game_fsm.P2_SCORE_ADDING;
        
        //ADDC(Reg.PLAYER2_NUM2, 0 ,Reg.ADD_TO_VALUE)
        //go to game_fsm.P2_STORE_ADD_TO_NUMBER2 
        game_fsm.P2_STORE_TO_SECOND_NUMBER_VALUE:
          which_player = PersonPlyer.P2PLAYING;
          alufn = Alufn.ADD;
          regfile_ra_address = Reg.PLAYER2_NUM2;
          bsel = Bsel.CONST_ZERO;
          regfile_writing_address = Reg.ADD_TO_VALUE;
          regfile_we = 1;
          game_fsm.d = game_fsm.P2_STORE_ADD_TO_NUMBER2;
       
       // ADDC(1,2,Reg.ADD_TO_WHICH_NUMBER)
       // go to game_fsm.P2_SCORE_ADDING;
       game_fsm.P2_STORE_ADD_TO_NUMBER2:
          which_player = PersonPlyer.P2PLAYING;
          alufn = Alufn.ADD;
          asel = Asel.CONST_TWO;
          bsel = Bsel.CONST_ZERO;
          regfile_writing_address = Reg.ADD_TO_WHICH_NUMBER;
          regfile_we = 1;
          game_fsm.d = game_fsm.P2_SCORE_ADDING;
          
        //ADD(Reg.ADD_FROM_VALUE,Reg.ADD_TO_VALUE, Reg.TEMP_RESULT)
        // go to game_fsm.P2_CHECK_SCORE_LESS_THAN_10
        game_fsm.P2_SCORE_ADDING:
          which_player = PersonPlyer.P2PLAYING;
          alufn = Alufn.ADD; // adding;
          regfile_ra_address = Reg.ADD_FROM_VALUE;
          regfile_rb_address = Reg.ADD_TO_VALUE;
          regfile_writing_address = Reg.TEMP_RESULT;  //temp result register
          regfile_we = 1;
          game_fsm.d = game_fsm.P2_CHECK_SCORE_LESS_THAN_10;
          
        // CMPLTC(Reg.TEMP_RESULT, 10, Reg.TEMP_COMPARE_RESULT)
        // go to game_fsm.P2_CHECK_SCORE_BRANCH
        game_fsm.P2_CHECK_SCORE_LESS_THAN_10:
          which_player = PersonPlyer.P2PLAYING;
          alufn = Alufn.CMPLT;
          bsel = Bsel.CONST_TEN;
          regfile_ra_address = Reg.TEMP_RESULT;
          regfile_writing_address = Reg.TEMP_COMPARE_RESULT;
          regfile_we = 1;
          game_fsm.d = game_fsm.P2_CHECK_SCORE_BRANCH;
        
        //if Reg.TEMP_COMPARE_RESULT = 0, z = 1: go to game_fsm.P2_SCORE_MINUS_10
        //if Reg.TEMP_COMPARE_RESULT = 1, z = 0: go to game_fsm.P2_DISPLAY_RESULT_CMP
        game_fsm.P2_CHECK_SCORE_BRANCH:
          which_player = PersonPlyer.P2PLAYING;
          regfile_ra_address = Reg.TEMP_COMPARE_RESULT;
          if(!z_regfile_port_a){
            game_fsm.d = game_fsm.P2_DISPLAY_RESULT_CMP;
          }
          else{
          game_fsm.d = game_fsm.P2_SCORE_MINUS_10;
          }
          
        //SUBC(Reg.TEMP_RESULT, 10, Reg.TEMP_RESULT)
        // go to game_fsm.P2_DISPLAY_RESULT_CMP
        game_fsm.P2_SCORE_MINUS_10:
          which_player = PersonPlyer.P2PLAYING;
          bsel = Bsel.CONST_TEN;
          alufn = Alufn.MINUS;
          regfile_we = 1;
          regfile_ra_address = Reg.TEMP_RESULT;
          regfile_writing_address = Reg.TEMP_RESULT;
          game_fsm.d = game_fsm.P2_DISPLAY_RESULT_CMP;
        
        //CMPEQC(Reg.ADD_TO_WHICH_NUMBER, 1, Reg.TEMP_COMPARE_RESULT)
        //go to game_fsm.P2_DISPLAY_RESULT_BRANCH  
        game_fsm.P2_DISPLAY_RESULT_CMP:
          which_player = PersonPlyer.P2PLAYING;
          alufn = Alufn.CMPEQ;
          asel = Asel.CONST_ONE;
          regfile_rb_address = Reg.ADD_TO_WHICH_NUMBER;
          regfile_writing_address = Reg.TEMP_COMPARE_RESULT;
          regfile_we = 1;
          game_fsm.d = game_fsm.P2_DISPLAY_RESULT_BRANCH;
          
        
        //if Reg.TEMP_COMPARE_RESULT = 0, z = 1: go to game_fsm.P2_DISPLAY_RESULT_ADD_BACK_TO_NUMBER2
        //if Reg.TEMP_COMPARE_RESULT = 1, z = 0: go to game_fsm.P2_DISPLAY_RESULT_ADD_BACK_TO_NUMBER1
        game_fsm.P2_DISPLAY_RESULT_BRANCH:
          which_player = PersonPlyer.P2PLAYING;
          regfile_ra_address = Reg.TEMP_COMPARE_RESULT;
          if(!z_regfile_port_a){
            game_fsm.d = game_fsm.P2_DISPLAY_RESULT_ADD_BACK_TO_NUMBER1;
          }
          else{
            game_fsm.d = game_fsm.P2_DISPLAY_RESULT_ADD_BACK_TO_NUMBER2;
          }
          
        //ADDC(Reg.TEMP_RESULT, 0, Reg.PLAYER2_NUM1)
        //go to game_fsm.P2_CHECK_FIRST;
        game_fsm.P2_DISPLAY_RESULT_ADD_BACK_TO_NUMBER1:
          which_player = PersonPlyer.P2PLAYING;
          regfile_ra_address = Reg.TEMP_RESULT;
          bsel = Bsel.CONST_ZERO;
          regfile_writing_address = Reg.PLAYER2_NUM1;
          regfile_we = 1;
          game_fsm.d = game_fsm.P2_CHECK_FIRST;
          
        //ADDC(Reg.TEMP_RESULT, 0, Reg.PLAYER2_NUM2)
        //go to game_fsm.P2_CHECK_FIRST;
        game_fsm.P2_DISPLAY_RESULT_ADD_BACK_TO_NUMBER2:
          which_player = PersonPlyer.P2PLAYING;
          regfile_ra_address = Reg.TEMP_RESULT;
          bsel = Bsel.CONST_ZERO;
          regfile_writing_address = Reg.PLAYER2_NUM2;
          regfile_we = 1;
          game_fsm.d = game_fsm.P2_CHECK_FIRST;
          
        //CMPEQC(Reg.PLAYER2_NUM1, 9, Reg.TEMP_COMPARE_RESULT)
       // go to game_fsm.P2_CHECK_WIN_FIRST_STAGE
       game_fsm.P2_CHECK_FIRST:
          which_player = PersonPlyer.P2PLAYING;
          bsel = Bsel.CONST_NINE;
          alufn = Alufn.CMPEQ; //COMEQ
          regfile_ra_address = Reg.PLAYER2_NUM1;
          regfile_we = 1;
          regfile_writing_address = Reg.TEMP_COMPARE_RESULT;
          game_fsm.d = game_fsm.P2_CHECK_WIN_FIRST_STAGE;
          
        //if Reg.TEMP_COMPARE_RESULT = 0, z = 1: go to game_fsm.P2_PLAY
        //if Reg.TEMP_COMPARE_RESULT = 1, z = 0: go to game_fsm.P2_CHECK_SECOND          
        game_fsm.P2_CHECK_WIN_FIRST_STAGE:
          which_player = PersonPlyer.P2PLAYING;
          regfile_ra_address = Reg.TEMP_COMPARE_RESULT;
          if (!z_regfile_port_a){
            game_fsm.d = game_fsm.P2_CHECK_SECOND;
          }
          else{
            game_fsm.d = game_fsm.P1_PLAY;
          }
          
        //CMPEQC(Reg.PLAYER2_NUM2, 9, Reg.TEMP_COMPARE_RESULT)
        //go to game_fsm.P2_CHECK_WIN_SECOND_STAGE
        game_fsm.P2_CHECK_SECOND:
          which_player = PersonPlyer.P2PLAYING;
          bsel = Bsel.CONST_NINE;
          alufn = Alufn.CMPEQ; //COMEQ
          regfile_ra_address = Reg.PLAYER2_NUM2;
          regfile_we = 1;
          regfile_writing_address = Reg.TEMP_COMPARE_RESULT;
          game_fsm.d = game_fsm.P2_CHECK_WIN_SECOND_STAGE;
          
        //if Reg.TEMP_COMPARE_RESULT = 0, z = 1: go to game_fsm.P2_PLAY
        //if Reg.TEMP_COMPARE_RESULT = 1, z = 0: go to game_fsm.GAME_END_P2_WIN
        game_fsm.P2_CHECK_WIN_SECOND_STAGE:
          which_player = PersonPlyer.P2PLAYING;
          regfile_ra_address = Reg.TEMP_COMPARE_RESULT;
          if (!z_regfile_port_a){
            game_fsm.d = game_fsm.GAME_END_P2_WIN;
          }else{
            game_fsm.d = game_fsm.P1_PLAY;
          }
        
        //P1 win, game end, stay in this state unless rst
        game_fsm.GAME_END_P1_WIN:
          who_win = PersonWin.P1WIN;
          game_fsm.d = game_fsm.GAME_END_P1_WIN; 
            
        //P2 win, game end, stay in this state unless rst
        game_fsm.GAME_END_P2_WIN:
          who_win = PersonWin.P2WIN;
          game_fsm.d = game_fsm.GAME_END_P2_WIN;  
           
      }
    }
  }
}
