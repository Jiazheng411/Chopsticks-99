// fsm and control logic
global Asel{
  const CONST_ONE = 2d1;
  const CONST_TWO = 2d2;
  const FROM_REGFILE = 2d3;
}


global Bsel{
  const CONST_ZERO = 2d0;
  const CONST_NINE = 2d1;
  const CONST_TEN = 2d2;
  const FROM_REGFILE = 2d3;
} 

global GameProgress{
 const GAME_START = b00;
 const P1_PLAYING = b01;
 const P2_PLAYING = b10;
 const GAME_OVER = b11;
}

global PersonPlyer{
 const P1PLAYING = b01;
 const P2PLAYING = b10;
}

global PersonWin{
 const P1WIN = b01;
  const P2WIN = b10;
}
module finateStateMachine (
    input clk,  // clock
    input rst,  // reset
    input button1_pressed,  // 8 buttun pressed signals
    input button2_pressed,
    input button3_pressed,
    input button4_pressed,
    input button5_pressed,
    input button6_pressed,
    input button7_pressed,
    input button8_pressed,
    input who_go_first,     // value go goes first
    input z_from_alu,       // z from alu
    
    output alufn[6],
    output asel[2],
    output bsel[2],
    output regfile_ra_address[4],
    output regfile_rb_address[4],
    output regfile_we,
    output regfile_writing_address[4],
    output which_player[2],  // which player is playing 
    output who_win[2]        // who wins the game
    
  ) {
  .clk(clk){
    .rst(rst){
      dff who_is_playing[2](#INIT(0));
      dff who_wins[2](#INIT(0));
    }
    fsm game_fsm={
      START,
      // P1's turn
      P1_STORE_PLAYER,
      P1_PLAY, 
      P1_STORE_TO_FIRST_NUMBER_VALUE,
      P1_STORE_ADD_TO_NUMBER1,
      P1_STORE_TO_SECOND_NUMBER_VALUE,
      P1_STORE_ADD_TO_NUMBER2,
      P1_STORE_TO_WHICH_NUMBER,
      P1_SCORE_ADDING,
        // remainder 10
      P1_CHECK_SCORE_LESS_THAN_10,
      P1_CHECK_SCORE_BRANCH,
      P1_SCORE_MINUS_10,
      P1_DISPLAY_RESULT_CMP,
      P1_DISPLAY_RESULT_BRANCH,
      P1_DISPLAY_RESULT_ADD_BACK_TO_NUMBER1,
      P1_DISPLAY_RESULT_ADD_BACK_TO_NUMBER2,
      
        // check whether p1 wins
      P1_CHECK_FIRST,
      P1_CHECK_WIN_FIRST_STAGE,
      P1_CHECK_SECOND,
      P1_CHECK_WIN_SECOND_STAGE,
      P1_CHANGE_WINNER,
      
      // P2's turn
      P2_STORE_PLAYER,
      P2_PLAY, 
      P2_STORE_TO_FIRST_NUMBER_VALUE,
      P2_STORE_ADD_TO_NUMBER1,
      P2_STORE_TO_SECOND_NUMBER_VALUE,
      P2_STORE_ADD_TO_NUMBER2,
      P2_STORE_TO_WHICH_NUMBER,
      P2_SCORE_ADDING,
      
        // remainder 10
      P2_CHECK_SCORE_LESS_THAN_10,
      P2_CHECK_SCORE_BRANCH,
      P2_SCORE_MINUS_10,
      P2_DISPLAY_RESULT_CMP,
      P2_DISPLAY_RESULT_BRANCH,
      P2_DISPLAY_RESULT_ADD_BACK_TO_NUMBER1,
      P2_DISPLAY_RESULT_ADD_BACK_TO_NUMBER2,
      
        // check whether p2 wins
      P2_CHECK_FIRST,
      P2_CHECK_WIN_FIRST_STAGE,
      P2_CHECK_SECOND,
      P2_CHECK_WIN_SECOND_STAGE,
      P2_CHANGE_WINNER,
      // end
      GAME_END
      };
  }

  always {
    alufn = Alufn.ADD;
    asel = Asel.FROM_REGFILE;
    bsel = Bsel.FROM_REGFILE;
    regfile_we = 0;
    regfile_writing_address = Reg.TEMP_RESULT;
    regfile_ra_address = Reg.PLAYER1_NUM1;
    regfile_rb_address = Reg.PLAYER2_NUM1;
    which_player = who_is_playing.q;
    who_win = who_wins.q; 
    if (rst){
        game_fsm.d = game_fsm.START;
    }
    else{
    
      case(game_fsm.q){
      
        game_fsm.START:
          if(who_go_first == 0){
            game_fsm.d = game_fsm.P1_PLAY;
          }
          else{
            game_fsm.d = game_fsm.P2_PLAY;
          }
          
          
        game_fsm.P1_STORE_PLAYER:
          alufn = Alufn.ADD;
          asel = Asel.CONST_ONE;
          bsel = Bsel.CONST_ZERO;
          regfile_writing_address = Reg.CURRENT_PLAYER;
          regfile_we = 1;
          game_fsm.d = game_fsm.P1_PLAY;
          
        game_fsm.P1_PLAY:
          who_is_playing.d = PersonPlyer.P1PLAYING;
          if(button1_pressed | button2_pressed | button3_pressed | button4_pressed){
            alufn = Alufn.ADD;
            bsel = Bsel.CONST_ZERO;
            regfile_writing_address = Reg.ADD_FROM_VALUE;
            regfile_we = 1;
            if(button1_pressed){
              regfile_ra_address = Reg.PLAYER2_NUM1;
              game_fsm.d = game_fsm.P1_STORE_TO_FIRST_NUMBER_VALUE;
            }
            else if (button2_pressed){
              regfile_ra_address = Reg.PLAYER2_NUM2;
              game_fsm.d = game_fsm.P1_STORE_TO_FIRST_NUMBER_VALUE;
            }
            else if (button3_pressed){
              regfile_ra_address = Reg.PLAYER2_NUM1;
              game_fsm.d = game_fsm.P1_STORE_TO_SECOND_NUMBER_VALUE;
            }
            else if (button4_pressed){
              regfile_ra_address = Reg.PLAYER2_NUM2;
              game_fsm.d = game_fsm.P1_STORE_TO_SECOND_NUMBER_VALUE;
            }                         
            //game_fsm.d = game_fsm.P1_SCORE_ADDING;
          }
          else{
            game_fsm.d = game_fsm.P1_STORE_TO_FIRST_NUMBER_VALUE;
          }
          
          
        game_fsm.P1_STORE_TO_FIRST_NUMBER_VALUE:
          alufn = Alufn.ADD;
          regfile_ra_address = Reg.PLAYER1_NUM1;
          bsel = Bsel.CONST_ZERO;
          regfile_writing_address = Reg.ADD_TO_VALUE;
          regfile_we = 1;
          game_fsm.d = game_fsm.P1_STORE_ADD_TO_NUMBER1;
        
        game_fsm.P1_STORE_ADD_TO_NUMBER1:
          alufn = Alufn.ADD;
          asel = Asel.CONST_ONE;
          bsel = Bsel.CONST_ZERO;
          regfile_writing_address = Reg.ADD_TO_WHICH_NUMBER;
          regfile_we = 1;
          game_fsm.d = game_fsm.P1_SCORE_ADDING;
        
          
        game_fsm.P1_STORE_TO_SECOND_NUMBER_VALUE:
          alufn = Alufn.ADD;
          regfile_ra_address = Reg.PLAYER1_NUM2;
          bsel = Bsel.CONST_ZERO;
          regfile_writing_address = Reg.ADD_TO_VALUE;
          regfile_we = 1;
          game_fsm.d = game_fsm.P1_STORE_ADD_TO_NUMBER2;
          
       game_fsm.P1_STORE_ADD_TO_NUMBER2:
          alufn = Alufn.ADD;
          asel = Asel.CONST_TWO;
          bsel = Bsel.CONST_ZERO;
          regfile_writing_address = Reg.ADD_TO_WHICH_NUMBER;
          regfile_we = 1;
          game_fsm.d = game_fsm.P1_SCORE_ADDING;
          
          
        game_fsm.P1_SCORE_ADDING:
          alufn = Alufn.ADD; // adding;
          regfile_ra_address = Reg.ADD_FROM_VALUE;
          regfile_rb_address = Reg.ADD_TO_VALUE;
          regfile_writing_address = Reg.TEMP_RESULT;  //temp result register
          regfile_we = 1;
          game_fsm.d = game_fsm.P1_CHECK_SCORE_LESS_THAN_10;
          
        game_fsm.P1_CHECK_SCORE_LESS_THAN_10:
          alufn = Alufn.CMPLT;
          bsel = Bsel.CONST_TEN;
          regfile_ra_address = Reg.TEMP_RESULT;
          regfile_writing_address = Reg.TEMP_COMPARE_RESULT;
          regfile_we = 1;
          game_fsm.d = game_fsm.P1_CHECK_SCORE_BRANCH;
          
        game_fsm.P1_CHECK_SCORE_BRANCH:
          bsel = Bsel.CONST_ZERO;
          alufn = Alufn.ADD;
          regfile_ra_address = Reg.TEMP_COMPARE_RESULT;
          if(!z_from_alu){
            game_fsm.d = game_fsm.P1_DISPLAY_RESULT_CMP;
          }
          else{
          game_fsm.d = game_fsm.P1_SCORE_MINUS_10;
          }
          

          
        game_fsm.P1_SCORE_MINUS_10:
          bsel = Bsel.CONST_TEN;
          alufn = Alufn.MINUS;
          regfile_we = 1;
          regfile_ra_address = Reg.TEMP_RESULT;
          regfile_writing_address = Reg.TEMP_RESULT;
          game_fsm.d = game_fsm.P1_DISPLAY_RESULT_CMP;
          
        game_fsm.P1_DISPLAY_RESULT_CMP:
          alufn = Alufn.CMPEQ;
          asel = Asel.CONST_ONE;
          regfile_rb_address = Reg.ADD_TO_WHICH_NUMBER;
          regfile_writing_address = Reg.TEMP_COMPARE_RESULT;
          regfile_we = 1;
          game_fsm.d = game_fsm.P1_DISPLAY_RESULT_BRANCH;
        game_fsm.P1_DISPLAY_RESULT_BRANCH:
          alufn = Alufn.ADD;
          regfile_ra_address = Reg.TEMP_COMPARE_RESULT;
          bsel = Bsel.CONST_ZERO;
          if(!z_from_alu){
            game_fsm.d = game_fsm.P1_DISPLAY_RESULT_ADD_BACK_TO_NUMBER1;
          }
          else{
          game_fsm.d = game_fsm.P1_DISPLAY_RESULT_ADD_BACK_TO_NUMBER2;
          }
          
        game_fsm.P1_DISPLAY_RESULT_ADD_BACK_TO_NUMBER1:
          regfile_ra_address = Reg.TEMP_RESULT;
          bsel = Bsel.CONST_ZERO;
          regfile_writing_address = Reg.PLAYER1_NUM1;
          regfile_we = 1;
          game_fsm.d = game_fsm.P1_CHECK_FIRST;
          
        game_fsm.P1_DISPLAY_RESULT_ADD_BACK_TO_NUMBER2:
          regfile_ra_address = Reg.TEMP_RESULT;
          bsel = Bsel.CONST_ZERO;
          regfile_writing_address = Reg.PLAYER1_NUM2;
          regfile_we = 1;
          game_fsm.d = game_fsm.P1_CHECK_FIRST;
         
     
       game_fsm.P1_CHECK_FIRST:
          bsel = Bsel.CONST_NINE;
          alufn = Alufn.CMPEQ; //COMEQ
          regfile_ra_address = Reg.PLAYER1_NUM1;
          regfile_we = 1;
          regfile_writing_address = Reg.TEMP_COMPARE_RESULT;
          game_fsm.d = game_fsm.P1_CHECK_WIN_FIRST_STAGE;
          
          
        game_fsm.P1_CHECK_WIN_FIRST_STAGE:
          bsel = Bsel.CONST_ZERO;
          alufn = Alufn.ADD;
          regfile_ra_address = Reg.TEMP_COMPARE_RESULT;
          if (!z_from_alu){
            game_fsm.d = game_fsm.P1_CHECK_SECOND;
          }
          else{
            game_fsm.d = game_fsm.P2_PLAY;
          }
          
        game_fsm.P1_CHECK_SECOND:
          bsel = Bsel.CONST_NINE;
          alufn = Alufn.CMPEQ; //COMEQ
          regfile_ra_address = Reg.PLAYER1_NUM2;
          regfile_we = 1;
          regfile_writing_address = Reg.TEMP_COMPARE_RESULT;
          game_fsm.d = game_fsm.P1_CHECK_WIN_SECOND_STAGE;
          
          
        game_fsm.P1_CHECK_WIN_SECOND_STAGE:
          bsel = Bsel.CONST_ZERO;
          alufn = Alufn.ADD;
          regfile_ra_address = Reg.TEMP_COMPARE_RESULT;
          if (!z_from_alu){
            who_wins.d = PersonWin.P2WIN;
            game_fsm.d = game_fsm.GAME_END;
            
          }else{
            game_fsm.d = game_fsm.P2_PLAY;
          }
        
        game_fsm.P1_CHANGE_WINNER:
          alufn = Alufn.ADD;
          asel = Asel.CONST_ONE;
          bsel = Bsel.CONST_ZERO;
          regfile_writing_address = Reg.CURRENT_WINNER;
          regfile_we = 1;
          game_fsm.d = game_fsm.GAME_END;
          
        game_fsm.P2_STORE_PLAYER:
          alufn = Alufn.ADD;
          asel = Asel.CONST_TWO;
          bsel = Bsel.CONST_ZERO;
          regfile_writing_address = Reg.CURRENT_PLAYER;
          regfile_we = 1;
          game_fsm.d = game_fsm.P2_PLAY;

          
        game_fsm.P2_PLAY:
          who_is_playing.d = PersonPlyer.P2PLAYING;
          if(button5_pressed | button6_pressed | button7_pressed | button8_pressed){
            alufn = Alufn.ADD;
            bsel = Bsel.CONST_ZERO;
            regfile_writing_address = Reg.ADD_FROM_VALUE;
            regfile_we = 1;
            if(button5_pressed){
              regfile_ra_address = Reg.PLAYER1_NUM1;
              game_fsm.d = game_fsm.P2_STORE_TO_FIRST_NUMBER_VALUE;
            }
            else if (button6_pressed){
              regfile_ra_address = Reg.PLAYER1_NUM2;
              game_fsm.d = game_fsm.P2_STORE_TO_FIRST_NUMBER_VALUE;
            }
            else if (button7_pressed){
              regfile_ra_address = Reg.PLAYER1_NUM1;
              game_fsm.d = game_fsm.P2_STORE_TO_SECOND_NUMBER_VALUE;
            }
            else if (button8_pressed){
              regfile_ra_address = Reg.PLAYER1_NUM2;
              game_fsm.d = game_fsm.P2_STORE_TO_SECOND_NUMBER_VALUE;
            }                         
          }
          else{
            game_fsm.d = game_fsm.P2_PLAY;
          }
        game_fsm.P2_STORE_TO_FIRST_NUMBER_VALUE:
          alufn = Alufn.ADD;
          regfile_ra_address = Reg.PLAYER2_NUM1;
          bsel = Bsel.CONST_ZERO;
          regfile_writing_address = Reg.ADD_TO_VALUE;
          regfile_we = 1;
          game_fsm.d = game_fsm.P2_STORE_ADD_TO_NUMBER1;
        
        game_fsm.P2_STORE_ADD_TO_NUMBER1:
          alufn = Alufn.ADD;
          asel = Asel.CONST_ONE;
          bsel = Bsel.CONST_ZERO;
          regfile_writing_address = Reg.ADD_TO_WHICH_NUMBER;
          regfile_we = 1;
          game_fsm.d = game_fsm.P2_SCORE_ADDING;
        
          
        game_fsm.P2_STORE_TO_SECOND_NUMBER_VALUE:
          alufn = Alufn.ADD;
          regfile_ra_address = Reg.PLAYER2_NUM2;
          bsel = Bsel.CONST_ZERO;
          regfile_writing_address = Reg.ADD_TO_VALUE;
          regfile_we = 1;
          game_fsm.d = game_fsm.P2_STORE_ADD_TO_NUMBER2;
          
       game_fsm.P2_STORE_ADD_TO_NUMBER2:
          alufn = Alufn.ADD;
          asel = Asel.CONST_TWO;
          bsel = Bsel.CONST_ZERO;
          regfile_writing_address = Reg.ADD_TO_WHICH_NUMBER;
          regfile_we = 1;
          game_fsm.d = game_fsm.P2_SCORE_ADDING;
          
          
        game_fsm.P2_SCORE_ADDING:
          alufn = Alufn.ADD; // adding;
          regfile_ra_address = Reg.ADD_FROM_VALUE;
          regfile_rb_address = Reg.ADD_TO_VALUE;
          regfile_writing_address = Reg.TEMP_RESULT;  //temp result register
          regfile_we = 1;
          game_fsm.d = game_fsm.P2_CHECK_SCORE_LESS_THAN_10;
        
        game_fsm.P2_CHECK_SCORE_LESS_THAN_10:
          alufn = Alufn.CMPLT;
          bsel = Bsel.CONST_TEN;
          regfile_ra_address = Reg.TEMP_RESULT;
          regfile_writing_address = Reg.TEMP_COMPARE_RESULT;
          regfile_we = 1;
          game_fsm.d = game_fsm.P2_CHECK_SCORE_BRANCH;
          
        game_fsm.P2_CHECK_SCORE_BRANCH:
          bsel = Bsel.CONST_ZERO;
          alufn = Alufn.ADD;
          regfile_ra_address = Reg.TEMP_COMPARE_RESULT;
          if(!z_from_alu){
            game_fsm.d = game_fsm.P2_DISPLAY_RESULT_CMP;
          }
          else{
          game_fsm.d = game_fsm.P2_SCORE_MINUS_10;
          }
            
        game_fsm.P2_SCORE_MINUS_10:
          bsel = Bsel.CONST_TEN;
          alufn = Alufn.MINUS;
          regfile_we = 1;
          regfile_ra_address = Reg.TEMP_RESULT;
          regfile_writing_address = Reg.TEMP_RESULT;
          game_fsm.d = game_fsm.P2_DISPLAY_RESULT_CMP;
          
        game_fsm.P2_DISPLAY_RESULT_CMP:
          alufn = Alufn.CMPEQ;
          asel = Asel.CONST_ONE;
          regfile_rb_address = Reg.ADD_TO_WHICH_NUMBER;
          regfile_writing_address = Reg.TEMP_COMPARE_RESULT;
          regfile_we = 1;
          game_fsm.d = game_fsm.P2_DISPLAY_RESULT_BRANCH;
        game_fsm.P2_DISPLAY_RESULT_BRANCH:
          alufn = Alufn.ADD;
          regfile_ra_address = Reg.TEMP_COMPARE_RESULT;
          bsel = Bsel.CONST_ZERO;
          if(!z_from_alu){
            game_fsm.d = game_fsm.P2_DISPLAY_RESULT_ADD_BACK_TO_NUMBER1;
          }
          else{
          game_fsm.d = game_fsm.P2_DISPLAY_RESULT_ADD_BACK_TO_NUMBER2;
          }
          
        game_fsm.P2_DISPLAY_RESULT_ADD_BACK_TO_NUMBER1:
          regfile_ra_address = Reg.TEMP_RESULT;
          bsel = Bsel.CONST_ZERO;
          regfile_writing_address = Reg.PLAYER2_NUM1;
          regfile_we = 1;
          game_fsm.d = game_fsm.P2_CHECK_FIRST;
          
        game_fsm.P2_DISPLAY_RESULT_ADD_BACK_TO_NUMBER2:
          regfile_ra_address = Reg.TEMP_RESULT;
          bsel = Bsel.CONST_ZERO;
          regfile_writing_address = Reg.PLAYER2_NUM2;
          regfile_we = 1;
          game_fsm.d = game_fsm.P2_CHECK_FIRST;
          
        game_fsm.P2_CHECK_FIRST:
          bsel = Bsel.CONST_NINE;
          alufn = Alufn.CMPEQ; //COMEQ
          regfile_ra_address = Reg.PLAYER2_NUM1;
          regfile_we = 1;
          regfile_writing_address = Reg.TEMP_COMPARE_RESULT;
          game_fsm.d = game_fsm.P2_CHECK_WIN_FIRST_STAGE;
          
        game_fsm.P2_CHECK_WIN_FIRST_STAGE:
          alufn = Alufn.ADD;
          bsel = Bsel.CONST_ZERO;
          regfile_ra_address = Reg.TEMP_COMPARE_RESULT;
          if (!z_from_alu){
            game_fsm.d = game_fsm.P2_CHECK_SECOND;
          }
          else{
            game_fsm.d = game_fsm.P1_PLAY;
          }
          
        game_fsm.P2_CHECK_SECOND:
          bsel = Bsel.CONST_NINE;
          alufn = Alufn.CMPEQ; //COMEQ
          regfile_ra_address = Reg.PLAYER2_NUM2;
          regfile_we = 1;
          regfile_writing_address = Reg.TEMP_COMPARE_RESULT;
          game_fsm.d = game_fsm.P2_CHECK_WIN_SECOND_STAGE;
          
          
        game_fsm.P2_CHECK_WIN_SECOND_STAGE:
          bsel = Bsel.CONST_ZERO;
          alufn = Alufn.ADD;
          regfile_ra_address = Reg.TEMP_COMPARE_RESULT;
          if (!z_from_alu){
            game_fsm.d = game_fsm.GAME_END;
            who_wins.d = PersonWin.P2WIN;
          }else{
            game_fsm.d = game_fsm.P1_PLAY;
          }
          
        game_fsm.P2_CHANGE_WINNER:
          alufn = Alufn.ADD;
          asel = Asel.CONST_TWO;
          bsel = Bsel.CONST_ZERO;
          regfile_writing_address = Reg.CURRENT_WINNER;
          regfile_we = 1;
          game_fsm.d = game_fsm.GAME_END;
          
        game_fsm.GAME_END:
          game_fsm.d = game_fsm.GAME_END;   
           
      }
    }
  }
}
