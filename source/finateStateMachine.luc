global Bsel{
  const CONST_ZERO = 2d0;
  const CONST_NINE = 2d1;
  const CONST_TEN = 2d2;
  const FROM_REGFILE = 2d3;
} 

global GameProgress{
 const GAME_START = b00;
 const P1_PLAYING = b01;
 const P2_PLAYING = b10;
 const GAME_OVER = b11;
}

module finateStateMachine (
    input clk,  // clock
    input rst,  // reset
    input button1_pressed,
    input button2_pressed,
    input button3_pressed,
    input button4_pressed,
    input button5_pressed,
    input button6_pressed,
    input button7_pressed,
    input button8_pressed,
    input z_from_alu,
    
    output alufn[6],
    output bsel[2],
    output regfile_ra_address[4],
    output regfile_rb_address[4],
    output regfile_we,
    output regfile_writing_address[4],
    output game_state[2]
  ) {
  .clk(clk){
    .rst(rst){
      dff who_play_first;
      dff add_from[4];
      dff add_to[4];
      dff game_progress[2](#INIT(0));
    }
    fsm game_fsm={
      START,
      P1_PLAY, 
      P1_SCORE_ADDING,
      P1_SCORE_REMAINDER,
      P1_CHECK_FIRST,
      P1_CHECK_WIN_FIRST_STAGE,
      P1_CHECK_SECOND,
      P1_CHECK_WIN_SECOND_STAGE,
      P2_PLAY, 
      P2_SCORE_ADDING,
      P2_SCORE_REMAINDER,
      P2_CHECK_FIRST,
      P2_CHECK_WIN_FIRST_STAGE,
      P2_CHECK_SECOND,
      P2_CHECK_WIN_SECOND_STAGE,
      GAME_END
      };
  }

  always {
    alufn = Alufn.ADD;
    bsel = Bsel.FROM_REGFILE;
    regfile_we = 0;
    regfile_writing_address = Reg.TEMP_RESULT;
    regfile_ra_address = Reg.PLAYER1_NUM1;
    regfile_rb_address = Reg.PLAYER2_NUM1;
    game_state = game_progress.q;
    if (rst){
        game_fsm.d = game_fsm.START;
    }
    else{
    
      case(game_fsm.q){
      
        game_fsm.START:
          game_progress.d = GameProgress.GAME_START;
          if(who_play_first.q == 0){
            game_fsm.d = game_fsm.P1_PLAY;
          }
          else{
            game_fsm.d = game_fsm.P2_PLAY;
          }
          
        game_fsm.P1_PLAY:
          game_progress.d = GameProgress.P1_PLAYING;
          if(button1_pressed | button2_pressed | button3_pressed | button4_pressed){
            if(button1_pressed){
              add_from.d = Reg.PLAYER2_NUM1;
              add_to.d = Reg.PLAYER1_NUM1;
            }
            else if (button2_pressed){
              add_from.d = Reg.PLAYER2_NUM2;
              add_to.d = Reg.PLAYER1_NUM1;
            }
            else if (button3_pressed){
              add_from.d = Reg.PLAYER2_NUM1;
              add_to.d = Reg.PLAYER1_NUM2;
            }
            else if (button4_pressed){
              add_from.d = Reg.PLAYER2_NUM2;
              add_to.d = Reg.PLAYER1_NUM2;
            }                         
            game_fsm.d = game_fsm.P1_SCORE_ADDING;
          }
          else{
            game_fsm.d = game_fsm.P1_PLAY;
          }
          
        game_fsm.P1_SCORE_ADDING:
          alufn = Alufn.ADD; // adding;
          regfile_ra_address = add_from.q;
          regfile_rb_address = add_to.q;
          regfile_writing_address = Reg.TEMP_RESULT;  //temp result register
          //regfile_writing_address = add_to.q;
          regfile_we = 1;
          game_fsm.d = game_fsm.P1_SCORE_REMAINDER;
          //game_fsm.d = game_fsm.P1_CHECK_FIRST;
          
        game_fsm.P1_SCORE_REMAINDER:
          bsel = Bsel.CONST_TEN;
          alufn = Alufn.REMAINDER; //remainder
          regfile_ra_address = Reg.TEMP_RESULT;
          regfile_writing_address = add_to.q;
          regfile_we = 1;
          game_fsm.d = game_fsm.P1_CHECK_FIRST;
          
        game_fsm.P1_CHECK_FIRST:
          bsel = Bsel.CONST_NINE;
          alufn = Alufn.CMPEQ; //COMEQ
          regfile_ra_address = Reg.PLAYER1_NUM1;
          regfile_we = 1;
          regfile_writing_address = Reg.TEMP_COMPARE_RESULT;
          game_fsm.d = game_fsm.P1_CHECK_WIN_FIRST_STAGE;
          
        game_fsm.P1_CHECK_WIN_FIRST_STAGE:
          bsel = Bsel.CONST_ZERO;
          alufn = Alufn.ADD;
          regfile_ra_address = Reg.TEMP_COMPARE_RESULT;
          if (!z_from_alu){
            game_fsm.d = game_fsm.P1_CHECK_SECOND;
          }
          else{
            game_fsm.d = game_fsm.P2_PLAY;
          }
          
        game_fsm.P1_CHECK_SECOND:
          bsel = Bsel.CONST_NINE;
          alufn = Alufn.CMPEQ; //COMEQ
          regfile_ra_address = Reg.PLAYER1_NUM2;
          regfile_we = 1;
          regfile_writing_address = Reg.TEMP_COMPARE_RESULT;
          game_fsm.d = game_fsm.P1_CHECK_WIN_SECOND_STAGE;
          
          
        game_fsm.P1_CHECK_WIN_SECOND_STAGE:
          bsel = Bsel.CONST_ZERO;
          alufn = Alufn.ADD;
          regfile_ra_address = Reg.TEMP_COMPARE_RESULT;
          if (!z_from_alu){
            game_fsm.d = game_fsm.GAME_END;
          }else{
            game_fsm.d = game_fsm.P2_PLAY;
          }

          
        game_fsm.P2_PLAY:
          game_progress.d = GameProgress.P2_PLAYING;
          if(button5_pressed | button6_pressed | button7_pressed | button8_pressed){
            if(button5_pressed){
              add_from.d = Reg.PLAYER1_NUM1;
              add_to.d = Reg.PLAYER2_NUM1;
            }
            else if (button6_pressed){
              add_from.d = Reg.PLAYER1_NUM2;
              add_to.d = Reg.PLAYER2_NUM1;
            }
            else if (button7_pressed){
              add_from.d = Reg.PLAYER1_NUM1;
              add_to.d = Reg.PLAYER2_NUM2;
            }
            else if (button8_pressed){
              add_from.d = Reg.PLAYER1_NUM2;
              add_to.d = Reg.PLAYER2_NUM2;
            }                       
            game_fsm.d = game_fsm.P2_SCORE_ADDING;
          }
          else{
            game_fsm.d = game_fsm.P2_PLAY;
          }
          
        game_fsm.P2_SCORE_ADDING:
          alufn = 0; // adding;
          regfile_ra_address = add_from.q;
          regfile_rb_address = add_to.q;
          //regfile_writing_address = Reg.TEMP_RESULT;
          regfile_writing_address = add_to.q;
          regfile_we = 1;
          //game_fsm.d = game_fsm.P2_SCORE_REMAINDER;
          game_fsm.d = game_fsm.P2_CHECK_FIRST;
          
        game_fsm.P2_SCORE_REMAINDER:
          bsel = Bsel.CONST_TEN;
          alufn = Alufn.REMAINDER; //remainder
          regfile_ra_address = Reg.TEMP_RESULT;
          regfile_writing_address = add_to.q;
          regfile_we = 1;
          game_fsm.d = game_fsm.P2_CHECK_FIRST;
          
        game_fsm.P2_CHECK_FIRST:
          bsel = Bsel.CONST_NINE;
          alufn = Alufn.CMPEQ; //COMEQ
          regfile_ra_address = Reg.PLAYER2_NUM1;
          regfile_we = 1;
          regfile_writing_address = Reg.TEMP_COMPARE_RESULT;
          game_fsm.d = game_fsm.P2_CHECK_WIN_FIRST_STAGE;
          
        game_fsm.P2_CHECK_WIN_FIRST_STAGE:
          alufn = Alufn.ADD;
          bsel = Bsel.CONST_ZERO;
          if (!z_from_alu){
            game_fsm.d = game_fsm.P2_CHECK_SECOND;
          }
          else{
            game_fsm.d = game_fsm.P1_PLAY;
          }
          
        game_fsm.P2_CHECK_SECOND:
          bsel = Bsel.CONST_NINE;
          alufn = Alufn.CMPEQ; //COMEQ
          regfile_ra_address = Reg.PLAYER2_NUM2;
          regfile_we = 1;
          regfile_writing_address = Reg.TEMP_COMPARE_RESULT;
          game_fsm.d = game_fsm.P2_CHECK_WIN_SECOND_STAGE;
          
          
        game_fsm.P2_CHECK_WIN_SECOND_STAGE:
          bsel = Bsel.CONST_ZERO;
          alufn = Alufn.ADD;
          regfile_ra_address = Reg.TEMP_COMPARE_RESULT;
          if (!z_from_alu){
            game_fsm.d = game_fsm.GAME_END;
          }else{
            game_fsm.d = game_fsm.P1_PLAY;
          }
          
        game_fsm.GAME_END:
          game_progress.d = GameProgress.GAME_OVER;
          game_fsm.d = game_fsm.GAME_END;   
           
      }
    }
  }
}
