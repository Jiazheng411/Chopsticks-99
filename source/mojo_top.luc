module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  sig who_go_first;
  sig seven_seg_separate[4][7];
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    .rst(rst){
      game_beta gameUnit;
    }
    
    reset_conditioner reset_cond;

    edge_detector edge_dt_btn_1 (#RISE(1), #FALL(0));
    edge_detector edge_dt_btn_2(#RISE(1), #FALL(0));
    edge_detector edge_dt_btn_3(#RISE(1), #FALL(0));
    edge_detector edge_dt_btn_4(#RISE(1), #FALL(0));
    edge_detector edge_dt_btn_5(#RISE(1), #FALL(0));
    edge_detector edge_dt_btn_6(#RISE(1), #FALL(0));
    edge_detector edge_dt_btn_7(#RISE(1), #FALL(0));
    edge_detector edge_dt_btn_8(#RISE(1), #FALL(0));

    button_conditioner btn_cond_1;
    button_conditioner btn_cond_2;
    button_conditioner btn_cond_3;
    button_conditioner btn_cond_4;  
    button_conditioner btn_cond_5;
    button_conditioner btn_cond_6;
    button_conditioner btn_cond_7;
    button_conditioner btn_cond_8;  
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    
    btn_cond_1.in=io_button[0]; //to reduce the bouncing effects of your button 
    btn_cond_2.in=io_button[1];
    btn_cond_3.in=io_button[2];
    btn_cond_4.in=io_button[3];
    btn_cond_5.in=io_button[4];
    btn_cond_6.in=io_dip[0][0];
    btn_cond_7.in=io_dip[0][1];
    btn_cond_8.in=io_dip[0][2];
    edge_dt_btn_1.in=btn_cond_1.out; //get the edge of button press
    edge_dt_btn_2.in=btn_cond_2.out;
    edge_dt_btn_3.in=btn_cond_3.out;
    edge_dt_btn_4.in=btn_cond_4.out;
    edge_dt_btn_5.in=btn_cond_5.out;
    edge_dt_btn_6.in=btn_cond_6.out;
    edge_dt_btn_7.in=btn_cond_7.out;
    edge_dt_btn_8.in=btn_cond_8.out;
    
    gameUnit.button_1_pressed = edge_dt_btn_1.out;
    gameUnit.button_2_pressed = edge_dt_btn_2.out;
    gameUnit.button_3_pressed = edge_dt_btn_3.out;
    gameUnit.button_4_pressed = edge_dt_btn_4.out;
    gameUnit.button_5_pressed = edge_dt_btn_5.out;
    gameUnit.button_6_pressed = edge_dt_btn_6.out;
    gameUnit.button_7_pressed = edge_dt_btn_7.out;
    gameUnit.button_8_pressed = edge_dt_btn_8.out;
    
    
    io_seg = gameUnit.ioseg_val;
    io_sel = gameUnit.iosel_val;
    
    seven_seg_separate = ~gameUnit.seven_seg_separate;
    io_led[2][7:1] = seven_seg_separate[0];
    io_led[1][7:1] = seven_seg_separate[1];
    led[7:1] = seven_seg_separate[2];
    io_led[0][7:4] = seven_seg_separate[3][6:3];
    io_led[2][0] = seven_seg_separate[3][2];
    io_led[1][0] = seven_seg_separate[3][1];
    led[0] = seven_seg_separate[3][0];
    
    
    io_led[0][1:0] = gameUnit.who_is_playing;
    io_led[0][3:2] = gameUnit.who_wins;
    
    //io_led[2] = gameUnit.reg1[7:0];
    //io_led[1] = gameUnit.temp_result_display[7:0];
    
    who_go_first = io_dip[2][0];
    gameUnit.who_go_first = who_go_first;
    
  }
}